{"version":3,"sources":["Form/email.js","Form/password.js","Form/passwordConfirmation.js","form.js","App.js","serviceWorker.js","index.js"],"names":["EmailInput","Props","className","type","placeholder","value","email","onChange","emailInputHandler","emailErr","Password","password","passwordInputHandler","passwordErr","PasswordConfirmation","passwordConf","passwordConfHandler","passwordConfErr","Form","props","state","passwordConfirmation","passwordConfirmationErr","bind","passwordConfirmationHandler","validateForm","validateEmail","e","this","setState","target","preventDefault","length","console","log","setTimeout","alert","test","String","toLowerCase","href","rel","icon","faReact","action","onSubmit","faGithub","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa6cf9f2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst EmailInput = Props => {\n  return (\n    <div className=\"form-group\">\n      <label>Email</label>\n      <br />\n      <input\n        type=\"email\"\n        className=\"username\"\n        placeholder=\"Email\"\n        value={Props.email}\n        onChange={Props.emailInputHandler}\n      />\n      {Props.emailErr && <p className=\"input-error\"> {Props.emailErr} </p>}\n    </div>\n  );\n};\n\nexport default EmailInput;\n","import React from \"react\";\n\nconst Password = Props => {\n  return (\n    <div className=\"form-group\">\n      <label>Password (<strong>NOTE:</strong> The password should be of atleast 8 or more characters.)</label>\n      <br />\n      <input\n        type=\"password\"\n        className=\"password\"\n        placeholder=\"Password\"\n        value={Props.password}\n        onChange={Props.passwordInputHandler}\n      />\n      {Props.passwordErr && \n      <p className=\"input-error\">{Props.passwordErr}</p>}\n    </div>\n  );\n};\n\nexport default Password;\n","import React from \"react\";\n\nconst PasswordConfirmation = Props => {\n  return (\n    <div className=\"form-group\">\n      <label>Password Confirmation</label>\n      <br />\n      <input\n        type=\"password\"\n        className=\"password\"\n        placeholder=\"Password Confirmation\"\n        value={Props.passwordConf}\n        onChange={Props.passwordConfHandler}\n      />\n      {Props.passwordConfErr && \n        <p className=\"input-error\">{Props.passwordConfErr}</p>\n      }\n    </div>\n  );\n};\n\nexport default PasswordConfirmation;\n","import React, { Component } from \"react\";\nimport EmailInput from \"./Form/email\";\nimport Password from \"./Form/password\";\nimport PasswordConfirmation from \"./Form/passwordConfirmation\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faReact, faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      emailErr: \"\",\n      password: \"\",\n      passwordErr: \"\",\n      passwordConfirmation: \"\",\n      passwordConfirmationErr: \"\",\n    };\n    this.emailInputHandler = this.emailInputHandler.bind(this);\n    this.passwordInputHandler = this.passwordInputHandler.bind(this);\n    this.passwordConfirmationHandler = this.passwordConfirmationHandler.bind(\n      this\n    );\n    this.validateForm = this.validateForm.bind(this);\n    this.validateEmail = this.validateEmail.bind(this);\n  }\n\n  // Function for handling the email input\n  emailInputHandler(e) {\n    this.setState({\n      email: e.target.value,\n      emailErr: \"\",\n    });\n  }\n\n  // Function for handling the password input\n  passwordInputHandler(e) {\n    this.setState({\n      password: e.target.value,\n      passwordErr: \"\",\n    });\n  }\n\n  // Function for handling the confirmation password input\n  passwordConfirmationHandler(e) {\n    this.setState({\n      passwordConfirmation: e.target.value,\n      passwordConfirmationErr: \"\",\n    });\n  }\n\n  // Function for validating the form\n  validateForm(e) {\n    e.preventDefault();\n\n    // Condition for checking the email address is in the correct format\n    if (!this.validateEmail(this.state.email)) {\n      this.setState({\n        emailErr: \"The email addrress is incorrect !\",\n      });\n    }\n\n    // Condition for checking whether the password entered is of atleast 8 characters or not\n    if (this.state.password.length < 8) {\n      this.setState({\n        passwordErr: \"The password should be of atleast 8 or more characters.\",\n      });\n    }\n\n    // Condition for checking the actual password is not empty and it's same as the confirmation password\n    if (\n      this.state.password.length >= 8 &&\n      this.state.password !== this.state.passwordConfirmation\n    ) {\n      console.log(this.state.password);\n      console.log(this.state.passwordConfirmation);\n      this.setState({\n        passwordConfirmationErr:\n          \"The confirmation password is not the same as the actual password.\",\n      });\n    }\n\n    // Timeout function for confirming successful submission of the form\n    setTimeout(() => {\n      if (\n        !this.state.emailErr &&\n        !this.state.passwordErr &&\n        !this.state.passwordConfirmationErr\n      ) {\n        alert(\"Form Submission Status: Success.\");\n      } else {\n        alert(\"Form Submission Status: Failure.\");\n      }\n    }, 1000);\n  }\n\n  // Function for checking the format of the user email address\n  validateEmail(email) {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n\n  render() {\n    const codeIcon = \"</>\";\n    return (\n      <div className=\"main-div\">\n        <div className=\"heading-div\">\n          Form Validation Component in{\" \"}\n          <span className=\"reactjs-span\">\n            <a\n              href=\"https://reactjs.org/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              ReactJS <FontAwesomeIcon icon={faReact} />\n            </a>\n          </span>\n        </div>\n        <form action=\"\" onSubmit={this.validateForm}>\n          <EmailInput\n            email={this.state.email}\n            emailErr={this.state.emailErr}\n            emailInputHandler={this.emailInputHandler}\n          />\n\n          <Password\n            password={this.state.password}\n            passwordErr={this.state.passwordErr}\n            passwordInputHandler={this.passwordInputHandler}\n          />\n\n          <PasswordConfirmation\n            passwordConf={this.state.passwordConfirmation}\n            passwordConfErr={this.state.passwordConfirmationErr}\n            passwordConfHandler={this.passwordConfirmationHandler}\n          />\n\n          <button className=\"signUpButton\" type=\"submit\">\n            Sign up\n          </button>\n        </form>\n        <div className=\"footer-div\">\n          <div className=\"footer\">\n            {codeIcon} by{\" \"}\n            <a\n              href=\"https://github.com/AnonSar\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              AnonSar\n              <FontAwesomeIcon className=\"github-icon\" icon={faGithub} />\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport Form from \"./form\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Form />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}